from fastapi import FastAPI, Request
from pydantic import BaseModel
from typing import Literal, Optional

app = FastAPI()

class EngineeringQuery(BaseModel):
    message: str

@app.post("/ask")
async def handle_engineering_query(query: EngineeringQuery):
    response = process_engineering_query(query.message)
    return response

# chat_handler.py
def process_engineering_query(message: str) -> dict:
    message_lower = message.lower()

    if "–≥–æ—Å—Ç" in message_lower:
        return {
            "type": "gost_info",
            "response": f"üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ: {message} (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)"
        }
    elif any(kw in message_lower for kw in ["–±–æ–ª—Ç", "–≥–∞–π–∫–∞", "—à–∞–π–±–∞", "—Ñ–ª–∞–Ω–µ—Ü", "—É–∑–µ–ª"]):
        return {
            "type": "generate_model",
            "input_text": message,
            "message": "‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –º–æ–¥–µ–ª–∏ –ø—Ä–∏–Ω—è—Ç. –°–æ—Ö—Ä–∞–Ω–∏ –≤ input.txt –∏ –∑–∞–ø—É—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä."
        }
    else:
        return {
            "type": "unknown",
            "message": "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π —É—Ç–æ—á–Ω–∏—Ç—å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–æ–≤–æ '–ì–û–°–¢', '–±–æ–ª—Ç', '–º–æ–¥–µ–ª—å' –∏ —Ç.–¥."
        }
from fastapi.staticfiles import StaticFiles
import os

app.mount("/", StaticFiles(directory=os.path.join(os.path.dirname(__file__), "../static"), html=True), name="static")
